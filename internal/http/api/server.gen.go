// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/user/balance/)
	GetBalance(ctx echo.Context) error

	// (POST /api/user/balance/withdraw)
	Withdraw(ctx echo.Context) error

	// (POST /api/user/login)
	LoginUser(ctx echo.Context) error

	// (GET /api/user/orders)
	GetOrders(ctx echo.Context) error

	// (POST /api/user/orders)
	CreateOrder(ctx echo.Context) error

	// (POST /api/user/register)
	RegisterUser(ctx echo.Context) error

	// (GET /api/user/withdrawals)
	GetWithdrawals(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetBalance converts echo context to params.
func (w *ServerInterfaceWrapper) GetBalance(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBalance(ctx)
	return err
}

// Withdraw converts echo context to params.
func (w *ServerInterfaceWrapper) Withdraw(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Withdraw(ctx)
	return err
}

// LoginUser converts echo context to params.
func (w *ServerInterfaceWrapper) LoginUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LoginUser(ctx)
	return err
}

// GetOrders converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrders(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOrders(ctx)
	return err
}

// CreateOrder converts echo context to params.
func (w *ServerInterfaceWrapper) CreateOrder(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateOrder(ctx)
	return err
}

// RegisterUser converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegisterUser(ctx)
	return err
}

// GetWithdrawals converts echo context to params.
func (w *ServerInterfaceWrapper) GetWithdrawals(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWithdrawals(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/user/balance/", wrapper.GetBalance)
	router.POST(baseURL+"/api/user/balance/withdraw", wrapper.Withdraw)
	router.POST(baseURL+"/api/user/login", wrapper.LoginUser)
	router.GET(baseURL+"/api/user/orders", wrapper.GetOrders)
	router.POST(baseURL+"/api/user/orders", wrapper.CreateOrder)
	router.POST(baseURL+"/api/user/register", wrapper.RegisterUser)
	router.GET(baseURL+"/api/user/withdrawals", wrapper.GetWithdrawals)

}

type GetBalanceRequestObject struct {
}

type GetBalanceResponseObject interface {
	VisitGetBalanceResponse(w http.ResponseWriter) error
}

type GetBalance200JSONResponse struct {
	Current     string `json:"current"`
	Withdrawals int    `json:"withdrawals"`
}

func (response GetBalance200JSONResponse) VisitGetBalanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetBalance401Response struct {
}

func (response GetBalance401Response) VisitGetBalanceResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetBalance500Response struct {
}

func (response GetBalance500Response) VisitGetBalanceResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type WithdrawRequestObject struct {
	Body *WithdrawJSONRequestBody
}

type WithdrawResponseObject interface {
	VisitWithdrawResponse(w http.ResponseWriter) error
}

type Withdraw200Response struct {
}

func (response Withdraw200Response) VisitWithdrawResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type Withdraw401Response struct {
}

func (response Withdraw401Response) VisitWithdrawResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type Withdraw402Response struct {
}

func (response Withdraw402Response) VisitWithdrawResponse(w http.ResponseWriter) error {
	w.WriteHeader(402)
	return nil
}

type Withdraw422Response struct {
}

func (response Withdraw422Response) VisitWithdrawResponse(w http.ResponseWriter) error {
	w.WriteHeader(422)
	return nil
}

type Withdraw500Response struct {
}

func (response Withdraw500Response) VisitWithdrawResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type LoginUserRequestObject struct {
	Body *LoginUserJSONRequestBody
}

type LoginUserResponseObject interface {
	VisitLoginUserResponse(w http.ResponseWriter) error
}

type LoginUser200ResponseHeaders struct {
	Authorization string
}

type LoginUser200Response struct {
	Headers LoginUser200ResponseHeaders
}

func (response LoginUser200Response) VisitLoginUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Authorization", fmt.Sprint(response.Headers.Authorization))
	w.WriteHeader(200)
	return nil
}

type LoginUser400Response struct {
}

func (response LoginUser400Response) VisitLoginUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type LoginUser401Response struct {
}

func (response LoginUser401Response) VisitLoginUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type LoginUser500Response struct {
}

func (response LoginUser500Response) VisitLoginUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetOrdersRequestObject struct {
}

type GetOrdersResponseObject interface {
	VisitGetOrdersResponse(w http.ResponseWriter) error
}

type GetOrders200JSONResponse []Order

func (response GetOrders200JSONResponse) VisitGetOrdersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOrders204Response struct {
}

func (response GetOrders204Response) VisitGetOrdersResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetOrders401Response struct {
}

func (response GetOrders401Response) VisitGetOrdersResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetOrders500Response struct {
}

func (response GetOrders500Response) VisitGetOrdersResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type CreateOrderRequestObject struct {
	Body *CreateOrderTextRequestBody
}

type CreateOrderResponseObject interface {
	VisitCreateOrderResponse(w http.ResponseWriter) error
}

type CreateOrder200Response struct {
}

func (response CreateOrder200Response) VisitCreateOrderResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type CreateOrder202Response struct {
}

func (response CreateOrder202Response) VisitCreateOrderResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type CreateOrder400Response struct {
}

func (response CreateOrder400Response) VisitCreateOrderResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreateOrder401Response struct {
}

func (response CreateOrder401Response) VisitCreateOrderResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateOrder409Response struct {
}

func (response CreateOrder409Response) VisitCreateOrderResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type CreateOrder422Response struct {
}

func (response CreateOrder422Response) VisitCreateOrderResponse(w http.ResponseWriter) error {
	w.WriteHeader(422)
	return nil
}

type CreateOrder500Response struct {
}

func (response CreateOrder500Response) VisitCreateOrderResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type RegisterUserRequestObject struct {
	Body *RegisterUserJSONRequestBody
}

type RegisterUserResponseObject interface {
	VisitRegisterUserResponse(w http.ResponseWriter) error
}

type RegisterUser200JSONResponse User

func (response RegisterUser200JSONResponse) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RegisterUser400Response struct {
}

func (response RegisterUser400Response) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type RegisterUser409Response struct {
}

func (response RegisterUser409Response) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type RegisterUser500Response struct {
}

func (response RegisterUser500Response) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetWithdrawalsRequestObject struct {
}

type GetWithdrawalsResponseObject interface {
	VisitGetWithdrawalsResponse(w http.ResponseWriter) error
}

type GetWithdrawals200JSONResponse []Withdrawal

func (response GetWithdrawals200JSONResponse) VisitGetWithdrawalsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWithdrawals204Response struct {
}

func (response GetWithdrawals204Response) VisitGetWithdrawalsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetWithdrawals401Response struct {
}

func (response GetWithdrawals401Response) VisitGetWithdrawalsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetWithdrawals500Response struct {
}

func (response GetWithdrawals500Response) VisitGetWithdrawalsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /api/user/balance/)
	GetBalance(ctx context.Context, request GetBalanceRequestObject) (GetBalanceResponseObject, error)

	// (POST /api/user/balance/withdraw)
	Withdraw(ctx context.Context, request WithdrawRequestObject) (WithdrawResponseObject, error)

	// (POST /api/user/login)
	LoginUser(ctx context.Context, request LoginUserRequestObject) (LoginUserResponseObject, error)

	// (GET /api/user/orders)
	GetOrders(ctx context.Context, request GetOrdersRequestObject) (GetOrdersResponseObject, error)

	// (POST /api/user/orders)
	CreateOrder(ctx context.Context, request CreateOrderRequestObject) (CreateOrderResponseObject, error)

	// (POST /api/user/register)
	RegisterUser(ctx context.Context, request RegisterUserRequestObject) (RegisterUserResponseObject, error)

	// (GET /api/user/withdrawals)
	GetWithdrawals(ctx context.Context, request GetWithdrawalsRequestObject) (GetWithdrawalsResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetBalance operation middleware
func (sh *strictHandler) GetBalance(ctx echo.Context) error {
	var request GetBalanceRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetBalance(ctx.Request().Context(), request.(GetBalanceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBalance")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetBalanceResponseObject); ok {
		return validResponse.VisitGetBalanceResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Withdraw operation middleware
func (sh *strictHandler) Withdraw(ctx echo.Context) error {
	var request WithdrawRequestObject

	var body WithdrawJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Withdraw(ctx.Request().Context(), request.(WithdrawRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Withdraw")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WithdrawResponseObject); ok {
		return validResponse.VisitWithdrawResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// LoginUser operation middleware
func (sh *strictHandler) LoginUser(ctx echo.Context) error {
	var request LoginUserRequestObject

	var body LoginUserJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.LoginUser(ctx.Request().Context(), request.(LoginUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LoginUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LoginUserResponseObject); ok {
		return validResponse.VisitLoginUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetOrders operation middleware
func (sh *strictHandler) GetOrders(ctx echo.Context) error {
	var request GetOrdersRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOrders(ctx.Request().Context(), request.(GetOrdersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOrders")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetOrdersResponseObject); ok {
		return validResponse.VisitGetOrdersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateOrder operation middleware
func (sh *strictHandler) CreateOrder(ctx echo.Context) error {
	var request CreateOrderRequestObject

	data, err := io.ReadAll(ctx.Request().Body)
	if err != nil {
		return err
	}
	body := CreateOrderTextRequestBody(data)
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOrder(ctx.Request().Context(), request.(CreateOrderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOrder")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateOrderResponseObject); ok {
		return validResponse.VisitCreateOrderResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RegisterUser operation middleware
func (sh *strictHandler) RegisterUser(ctx echo.Context) error {
	var request RegisterUserRequestObject

	var body RegisterUserJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RegisterUser(ctx.Request().Context(), request.(RegisterUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RegisterUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RegisterUserResponseObject); ok {
		return validResponse.VisitRegisterUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetWithdrawals operation middleware
func (sh *strictHandler) GetWithdrawals(ctx echo.Context) error {
	var request GetWithdrawalsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetWithdrawals(ctx.Request().Context(), request.(GetWithdrawalsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWithdrawals")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetWithdrawalsResponseObject); ok {
		return validResponse.VisitGetWithdrawalsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXTW/jNhD9KwTboxIpbnqob9mssTA2iIsEaQ5BUNDS2OZCItnhaFN3of9e8ENxZNGb",
	"brJB21MUznD4OO/xkf7CS90YrUCR5dMv3JYbaIT/XGAF6D4MagNIEvywKEtsRe0+aWuAT7kllGrNu4yr",
	"tlmGOTEkFcEa0MUsCWp9BVBtw6d3/HJ2yzP+69XifHZ9Pb/8wDM+v/zt7GL+fjc8e8/vs/FCram1qKD6",
	"XZCruNLYuC9eCYIjkg3w0aQu4wh/tBKhcotHqI+4hjV3a+rlJyjJrXljU+2o9VqqZDOMsPZBY5UI7mEJ",
	"NZ7MSC1/K2lToXgIrR+C0D1V47Yb1CVY+02tyrh1DD0HO6wakvcWGm/AFYWyRUnba6exAPzMyI+wPWtp",
	"4/5zjeQbEKGsEo0r4IIa5V+CpFY7rMLP5J0rLNVKe7iSahdb66NKmlo34uiEZ/wzoHVzp7w4Lo5P3P60",
	"ASWM5FP+0/HJceF7TxsPKRdG5q0FzJeiFqqE3I2uwXevAluiNBTKfQBiMYn7muhBzqsQe/cYQrBGKxv2",
	"PCkK96fUikD5qsKYWpZ+bv7JarU7iGOqyxYxThux9vAoEZsSwx59faXhvHvf0eE+Fx9d9dPiZNyCGyUi",
	"P1C5pJ/D5oZJc0WAStTsGvAzIJshahxIgk/vhmK4u+/uXcKYjR6sb422CVr6k3KQmz6Bh4aApXe62r6C",
	"lK+cv28+SYGAXZSwhS4toRezdFpMxklRrkxapjQxULpdb3z2ZJLitNSIUBIL4N+U+0eTTRPunJn1Jjqk",
	"+sKNeud+Odc/Iqz4lP+Q767KPN6TuS/9Csay6HfBDQdWN8Cwr5/Os1ikWKzYVdjo2xzaITOefPtVh4wp",
	"CYNc9JFX+aMkaOxzPC16kfbXB6KIt0fqFE2K0/FmLjU7j6D+FTvMDsj/QouK9RYybPI5giBYxNjhA0Dw",
	"J+WmFvI52b1I52c1gqi2LLyvQn8TluJhOvsRZQmGoGIrjSy+K+IV9900f1r8cgiBiHD7ByFbbplQmjaA",
	"rLVBRklPvFERrFjWwGaKHJVvaowIa2kpvksPe2NIw/4JNdTIVazx33HJ77xm+pr8JzpKSORcq1Utw5P8",
	"Fb6591Q7aJ5P8xIOejsIv72NPvkR8v/20q7r/g4AAP//VIdQIvsOAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
