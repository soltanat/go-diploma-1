// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package entities

import (
	"errors"
	"fmt"
)

const (
	// OrderStatusNEW is a OrderStatus of type NEW.
	OrderStatusNEW OrderStatus = "NEW"
	// OrderStatusPROCESSING is a OrderStatus of type PROCESSING.
	OrderStatusPROCESSING OrderStatus = "PROCESSING"
	// OrderStatusINVALID is a OrderStatus of type INVALID.
	OrderStatusINVALID OrderStatus = "INVALID"
	// OrderStatusPROCESSED is a OrderStatus of type PROCESSED.
	OrderStatusPROCESSED OrderStatus = "PROCESSED"
)

var ErrInvalidOrderStatus = errors.New("not a valid OrderStatus")

// String implements the Stringer interface.
func (x OrderStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x OrderStatus) IsValid() bool {
	_, err := ParseOrderStatus(string(x))
	return err == nil
}

var _OrderStatusValue = map[string]OrderStatus{
	"NEW":        OrderStatusNEW,
	"PROCESSING": OrderStatusPROCESSING,
	"INVALID":    OrderStatusINVALID,
	"PROCESSED":  OrderStatusPROCESSED,
}

// ParseOrderStatus attempts to convert a string to a OrderStatus.
func ParseOrderStatus(name string) (OrderStatus, error) {
	if x, ok := _OrderStatusValue[name]; ok {
		return x, nil
	}
	return OrderStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidOrderStatus)
}

// MarshalText implements the text marshaller method.
func (x OrderStatus) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *OrderStatus) UnmarshalText(text []byte) error {
	tmp, err := ParseOrderStatus(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
