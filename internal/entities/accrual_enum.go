// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package entities

import (
	"errors"
	"fmt"
)

const (
	// AccrualOrderStatusREGISTERED is a AccrualOrderStatus of type REGISTERED.
	AccrualOrderStatusREGISTERED AccrualOrderStatus = "REGISTERED"
	// AccrualOrderStatusINVALID is a AccrualOrderStatus of type INVALID.
	AccrualOrderStatusINVALID AccrualOrderStatus = "INVALID"
	// AccrualOrderStatusPROCESSING is a AccrualOrderStatus of type PROCESSING.
	AccrualOrderStatusPROCESSING AccrualOrderStatus = "PROCESSING"
	// AccrualOrderStatusPROCESSED is a AccrualOrderStatus of type PROCESSED.
	AccrualOrderStatusPROCESSED AccrualOrderStatus = "PROCESSED"
)

var ErrInvalidAccrualOrderStatus = errors.New("not a valid AccrualOrderStatus")

// String implements the Stringer interface.
func (x AccrualOrderStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x AccrualOrderStatus) IsValid() bool {
	_, err := ParseAccrualOrderStatus(string(x))
	return err == nil
}

var _AccrualOrderStatusValue = map[string]AccrualOrderStatus{
	"REGISTERED": AccrualOrderStatusREGISTERED,
	"INVALID":    AccrualOrderStatusINVALID,
	"PROCESSING": AccrualOrderStatusPROCESSING,
	"PROCESSED":  AccrualOrderStatusPROCESSED,
}

// ParseAccrualOrderStatus attempts to convert a string to a AccrualOrderStatus.
func ParseAccrualOrderStatus(name string) (AccrualOrderStatus, error) {
	if x, ok := _AccrualOrderStatusValue[name]; ok {
		return x, nil
	}
	return AccrualOrderStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidAccrualOrderStatus)
}

// MarshalText implements the text marshaller method.
func (x AccrualOrderStatus) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *AccrualOrderStatus) UnmarshalText(text []byte) error {
	tmp, err := ParseAccrualOrderStatus(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
